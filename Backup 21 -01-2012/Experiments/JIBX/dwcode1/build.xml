<?xml version="1.0"?>

<!-- ===========================================================================

Ant build file for JiBX "Java code to XML schema" tutorial examples.

============================================================================ -->

<project basedir="." default="help">
  
  <!-- The following block is intended to set the jibx-home location. It first
   checks the relative location of the JiBX libraries when this tutorial is run
   from inside the JiBX distribution, then (if that fails), looks for an
   environmental variable JIBX_HOME with the installation path. If you prefer to
   just set the path directly in this file, uncomment the following line and set
   the value to the appropriate directory, then delete the rest of the Ant
   commands down to the end of this block. -->
<!--  <property name="jibx-home" value="jibx-home-directory-path"/> -->
  <available file="../lib/jibx-bind.jar" property="jibx-home" value=".."/>
  <property environment="env"/>
  <condition property="jibx-home" value="${env.JIBX_HOME}">
    <and>
      <not>
        <isset property="jibx-home"/>
      </not>
      <available file="${env.JIBX_HOME}/lib"/>
    </and>
  </condition>
  <!-- End of jibx-home location setting block. -->
  
  <!-- make sure required jars are present -->
  <condition property="runtime-jars-found">
    <available file="${jibx-home}/lib/jibx-run.jar"/>
  </condition>
  <condition property="binding-jars-found">
    <and>
      <available file="${jibx-home}/lib/bcel.jar"/>
      <available file="${jibx-home}/lib/jibx-bind.jar"/>
      <available file="${jibx-home}/lib/jibx-run.jar"/>
    </and>
  </condition>
  <available property="extras-jar-found" file="${jibx-home}/lib/jibx-extras.jar"/>
  
  <!-- set classpath for compiling and running application with JiBX -->
  <path id="classpath">
    <fileset dir="${jibx-home}/lib" includes="*.jar"/>
    <pathelement location="bin"/>
  </path>
  
  <!-- make sure runtime jars are present -->
  <target name="check-runtime">
    <fail unless="jibx-home">JiBX home directory not found - define JIBX_HOME system property or set path directly in build.xml file.</fail>
    <fail unless="runtime-jars-found">Required JiBX runtime jar jibx-run.jar was not found in JiBX home lib directory (${jibx-home}/lib)</fail>
  </target>
  
  <!-- make sure extras jars are present -->
  <target name="check-extras" depends="check-runtime">
    <fail unless="extras-jar-found">Required JiBX extras jar jibx-extras.jar was not found in JiBX home lib directory (${jibx-home}/lib)</fail>
  </target>
  
  <!-- make sure binding jars are present -->
  <target name="check-binding" depends="check-runtime">
    <fail unless="binding-jars-found">Required JiBX binding jar jibx-bind.jar or bcel.jar was not found in JiBX home lib directory (${jibx-home}/lib)</fail>
  </target>
  
  <!-- clean compiled class files and output file -->
  <target name="clean">
    <delete quiet="true" dir="bin"/>
    <delete quiet="true" file="starter.xsd"/>
    <delete quiet="true" file="custom.xsd"/>
    <delete quiet="true">
      <fileset dir="." includes="out*.xml"/>
    </delete>
  </target>
  
  <!-- compile the classes -->
  <target name="compile" depends="clean,check-runtime">
  
    <echo message="Compiling Java source code"/>
    <mkdir dir="bin"/>
    <javac srcdir="src" destdir="bin" debug="on">
      <classpath refid="classpath"/>
    </javac>
    
  </target>
  
  <!-- generate default binding and schema -->
  <target name="bindgen">
  
    <echo message="Running BindGen tool"/>
    <java classpathref="classpath" fork="true" failonerror="true"
        classname="org.jibx.binding.generator.BindGen">
      <arg value="-s"/>
      <arg value="src"/>
      <arg value="org.jibx.starter.Order"/>
    </java>
    
  </target>
  
  <!-- generate custom binding and schema -->
  <target name="custgen">
  
    <echo message="Running BindGen tool"/>
    <java classpathref="classpath" fork="true" failonerror="true"
        classname="org.jibx.binding.generator.BindGen">
      <arg value="-c"/>
      <arg value="custom${number}.xml"/>
      <arg value="-s"/>
      <arg value="src"/>
      <arg value="org.jibx.starter.Order"/>
    </java>
    
  </target>
  
  <!-- bind as a separate step -->
  <target name="bind" depends="check-binding">
    
    <echo message="Running JiBX binding compiler"/>
    <taskdef name="bind" classname="org.jibx.binding.ant.CompileTask">
      <classpath>
        <fileset dir="${jibx-home}/lib" includes="*.jar"/>
      </classpath>
    </taskdef>
    <bind binding="${basedir}/binding.xml">
      <classpath refid="classpath"/>
    </bind>
    
  </target>
  
  <!-- run the included test program to read and then write to separate file -->
  <target name="run" depends="check-runtime">
    <echo message="Running the sample application..."/>
    <java classname="org.jibx.starter.Test"
        fork="true" failonerror="true">
      <classpath refid="classpath" />
      <arg value="${basedir}/data.xml"/>
      <arg value="${basedir}/out.xml"/>
    </java>
    <echo message="Generated output document out.xml"/>
  </target>
  
  <!-- run the included test program to read and then write to separate file -->
  <target name="custrun" depends="check-runtime">
    <echo message="Running the sample application..."/>
    <java classname="org.jibx.starter.Test"
        fork="true" failonerror="true">
      <classpath refid="classpath" />
      <arg value="${basedir}/data${numin}.xml"/>
      <arg value="${basedir}/out${numout}.xml"/>
    </java>
    <echo message="Generated output document out${numout}.xml"/>
  </target>
  
  <target name="custgen1">
    <antcall target="custgen">
      <param name="number" value="1"/>
    </antcall>
  </target>
  
  <target name="custgen2">
    <antcall target="custgen">
      <param name="number" value="2"/>
    </antcall>
  </target>
  
  <target name="custgen3">
    <antcall target="custgen">
      <param name="number" value="3"/>
    </antcall>
  </target>
  
  <target name="custgen4">
    <antcall target="custgen">
      <param name="number" value="4"/>
    </antcall>
  </target>
  
  <target name="run1">
    <antcall target="custrun">
      <param name="numin" value="1"/>
      <param name="numout" value="1"/>
    </antcall>
  </target>
  
  <target name="run2">
    <antcall target="custrun">
      <param name="numin" value="2"/>
      <param name="numout" value="2"/>
    </antcall>
  </target>
  
  <target name="run3">
    <antcall target="custrun">
      <param name="numin" value="3"/>
      <param name="numout" value="3"/>
    </antcall>
  </target>
  
  <target name="run4">
    <antcall target="custrun">
      <param name="numin" value="2"/>
      <param name="numout" value="4"/>
    </antcall>
  </target>
  
  <!-- run default generation, build and test -->
  <target name="full" depends="compile,bindgen,bind,run"/>
  
  <!-- run first customization generation, build and test -->
  <target name="custom1" depends="compile,custgen1,bind,run1"/>
  
  <!-- run second customization generation, build and test -->
  <target name="custom2" depends="compile,custgen2,bind,run2"/>
  
  <!-- run third customization generation, build and test -->
  <target name="custom3" depends="compile,custgen3,bind,run3"/>
  
  <!-- run fourth customization generation, build and test -->
  <target name="custom4" depends="compile,custgen4,bind,run4"/>
  
  <!-- show list of targets -->
  <target name="help">
    <echo message="Targets are:"/>
    <echo/>
    <echo message="clean         delete all class files and generated code"/>
    <echo message="compile       compile class files"/>
    <echo message="bindgen       run BindGen without customizations"/>
    <echo message="bind          compile the generated binding"/>
    <echo message="run           test using data.xml as input and out.xml as output"/>
    <echo message="full          full build and run using defaults"/>
    <echo message="custgen1      run BindGen with custom1.xml customizations"/>
    <echo message="run1          test using data1.xml as input and out1.xml as output"/>
    <echo message="custom1       full build and run using custom1.xml customizations"/>
    <echo message="custgen2      run BindGen with custom2.xml customizations"/>
    <echo message="run2          test using data2.xml as input and out2.xml as output"/>
    <echo message="custom2       full build and run using custom2.xml customizations"/>
    <echo message="custgen3      run BindGen with custom3.xml customizations"/>
    <echo message="run3          test using data3.xml as input and out3.xml as output"/>
    <echo message="custom3       full build and run using custom3.xml customizations"/>
    <echo message="custgen4      run BindGen with custom4.xml customizations"/>
    <echo message="run4          test using data2.xml as input and out4.xml as output"/>
    <echo message="custom4       full build and run using custom4.xml customizations"/>
  </target>

</project>
